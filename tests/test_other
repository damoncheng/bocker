#!/usr/bin/env bash

btrfs_path='/var/bocker' && cgroups='cpu,cpuacct,memory';
registry_base="https://registry-1.docker.io/v2"

<<COMMENT
#====MAKE IMAGE====

#=get token from registry
token=$(curl "https://auth.docker.io/token?service=registry.docker.io&scope=repository:$1:pull"  | jq '.token'| sed 's/\"//g')

#=create directory for save layer
tmp_uuid="$(uuidgen)" && mkdir /tmp/"$tmp_uuid"

echo "uuid : $tmp_uuid"

#=get image manifest
curl -sL -H "Authorization: Bearer $token" "$registry_base/$1/manifests/$2"
manifest=$(curl -sL -H "Authorization: Bearer $token" "$registry_base/$1/manifests/$2" | jq -r '.fsLayers' | jq -r '.[].blobSum' )
[[ "${#manifest[@]}" -lt 1 ]] && echo "No image named '$1:$2' exists" && exit 1

#=get layer digest from manifest and download and extract to tmp directory 
for id in ${manifest[@]}; do
    curl -#L -H "Authorization: Bearer $token" "$registry_base/$1/blobs/$id" -o /tmp/"$tmp_uuid"/layer.tar
    tar xf /tmp/"$tmp_uuid"/layer.tar -C /tmp/"$tmp_uuid"
done


#=save image name to file
echo "$1:$2" > /tmp/"$tmp_uuid"/img.source

TMP_IMG_DIR=/tmp/"$tmp_uuid"

#=create image id
echo "start create image uuid"
#uuid="img_$(shuf -i 42002-42254 -n 1)"
uuid="42251"
echo "create image uuid : $uuid"

#=check image id
echo "start check image uuid"
btrfs subvolume list "$btrfs_path" | grep -qw "$uuid" && exit 1
echo "check image uuid success, not exist"

#=create image id directory
echo "start create subvolume $btrfs_path/$uuid"
btrfs subvolume create "$btrfs_path/$uuid" > /dev/null
echo "create subvolume success"

#=copy tmp image to image
echo "start copy image to directory"
cp -rf --reflink=auto "$TMP_IMG_DIR"/* "$btrfs_path/$uuid" > /dev/null
echo "copy image success"

echo "Created: $uuid"
COMMENT

image_uuid="img_42251"
uuid="ps_42251"
#cmd="ps -ef"
cmd="sh /test_loop.sh"

#====prepare container network information and container filesystem snatshot=====#
#ip="$(echo "${uuid: -3}" | sed 's/0//g')"
#mac="${uuid: -3:1}:${uuid: -2}"
#ip link add dev veth0_"$uuid" type veth peer name veth1_"$uuid"
#ip link set dev veth0_"$uuid" up
#ip link set veth0_"$uuid" master bridge0
#ip netns add netns_"$uuid"
#ip link set veth1_"$uuid" netns netns_"$uuid"
#ip netns exec netns_"$uuid" ip link set dev lo up
#ip netns exec netns_"$uuid" ip link set veth1_"$uuid" address 02:42:ac:11:00"$mac"
#ip netns exec netns_"$uuid" ip addr add 10.0.0."$ip"/24 dev veth1_"$uuid"
#ip netns exec netns_"$uuid" ip link set dev veth1_"$uuid" up
#ip netns exec netns_"$uuid" ip route add default via 10.0.0.1
#btrfs subvolume snapshot "$btrfs_path/$image_uuid" "$btrfs_path/$uuid" > /dev/null
#echo 'nameserver 8.8.8.8' > "$btrfs_path/$uuid"/etc/resolv.conf
#echo "$cmd" > "$btrfs_path/$uuid/$uuid.cmd"

#========prepare container cgroup
#cgcreate -g "$cgroups:/$uuid"
#: "${BOCKER_CPU_SHARE:=512}" && cgset -r cpu.shares="$BOCKER_CPU_SHARE" "$uuid"
#: "${BOCKER_MEM_LIMIT:=512}" && cgset -r memory.limit_in_bytes="$((BOCKER_MEM_LIMIT * 1000000))" "$uuid"

#========run container
cgexec -g "$cgroups:$uuid" \
    ip netns exec netns_"$uuid" \
    unshare -fmuip --mount-proc \
    chroot "$btrfs_path/$uuid" \
    /bin/sh -c "/bin/mount -t proc proc /proc && $cmd" \
    2>&1 | tee "$btrfs_path/$uuid/$uuid.log" || true


